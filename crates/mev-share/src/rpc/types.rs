use alloy_primitives::{Bytes, TxHash, B256};
use serde::{Deserialize, Serialize};

#[derive(Debug, Deserialize)]
pub struct Bundle {
    pub version: String,
    pub inclusion: BundleInclusion,
    pub body: Vec<BundleBody>,
    pub validity: Option<BundleValidity>,
    pub privacy: Option<BundlePrivacy>,
}

#[derive(Debug, Deserialize)]
pub struct BundleInclusion {
    pub block: u64,
    #[serde(alias = "maxBlock")]
    pub max_block: Option<u64>,
}

#[derive(Debug, Deserialize)]
pub struct BundleBody {
    pub hash: Option<TxHash>,
    pub tx: Option<Bytes>,
    #[serde(alias = "canRevert")]
    pub can_revert: Option<bool>,
    pub bundle: Option<Bundle>,
}

#[derive(Debug, Deserialize)]
pub struct BundleValidity {
    /// Specifies the minimum percent of a given bundle's earnings to redistribute for it to be included in a builder's block.
    pub refund: Vec<RefundConstraint>,
    /// Specifies what addresses should receive what percent of the overall refund for this bundle, if it is enveloped by another bundle (eg. a searcher backrun). The sum of percents in this array should equal 100.
    #[serde(alias = "refundConfig")]
    pub refund_config: Vec<RefundConfig>,
}

#[derive(Debug, Deserialize)]
pub struct RefundConstraint {
    /// Index of the entry in body to which the refund percentage applies.
    #[serde(alias = "bodyIdx")]
    pub body_idx: u64,
    /// Minimum refund percentage required for this bundle to be eligible for use by another searcher, paid by said searcher from the profit generated by including this bundle in theirs.
    pub percent: u64,
}

#[derive(Debug, Deserialize)]
pub struct RefundConfig {
    /// Address which receives the portion of the refund.
    pub address: B256,
    /// Percentage of refund to pay to the address.
    pub percent: u64,
}

/// Preferences on what data should be shared about the bundle and its transactions.
#[derive(Debug, Deserialize)]
pub struct BundlePrivacy {
    /// Each item additively specifies which data about all transactions in the bundle to share. If no hints are specified, no data is shared. Transactions from other users that do not specify the same hints will not share additional information.
    pub hints: Vec<Hint>,
    /// Builders that have permission to receive this bundle and include it in a block.
    pub builders: Vec<String>,
}

#[derive(Debug, Deserialize, strum::Display)]
#[strum(serialize_all = "snake_case")]
pub enum Hint {
    Calldata,
    ContractAddress,
    Logs,
    FunctionSelector,
    Hash,
    TxHash,
}

#[derive(Debug, Deserialize)]
pub struct BundleHash {}

#[derive(Debug, Serialize, Clone)]
pub struct SendBundleResponse {}

#[derive(Debug, Serialize, Clone)]
pub struct SimulateBundleResponse {}

#[derive(Debug, Serialize, Clone)]
pub struct CancelBundleResponse {}
